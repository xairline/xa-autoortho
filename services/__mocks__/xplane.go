// Code generated by MockGen. DO NOT EDIT.
// Source: xplane.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	extra "github.com/xairline/goplane/extra"
)

// MockXplaneService is a mock of XplaneService interface.
type MockXplaneService struct {
	ctrl     *gomock.Controller
	recorder *MockXplaneServiceMockRecorder
}

// MockXplaneServiceMockRecorder is the mock recorder for MockXplaneService.
type MockXplaneServiceMockRecorder struct {
	mock *MockXplaneService
}

// NewMockXplaneService creates a new mock instance.
func NewMockXplaneService(ctrl *gomock.Controller) *MockXplaneService {
	mock := &MockXplaneService{ctrl: ctrl}
	mock.recorder = &MockXplaneServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXplaneService) EXPECT() *MockXplaneServiceMockRecorder {
	return m.recorder
}

// flightLoop mocks base method.
func (m *MockXplaneService) flightLoop(elapsedSinceLastCall, elapsedTimeSinceLastFlightLoop float32, counter int, ref interface{}) float32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "flightLoop", elapsedSinceLastCall, elapsedTimeSinceLastFlightLoop, counter, ref)
	ret0, _ := ret[0].(float32)
	return ret0
}

// flightLoop indicates an expected call of flightLoop.
func (mr *MockXplaneServiceMockRecorder) flightLoop(elapsedSinceLastCall, elapsedTimeSinceLastFlightLoop, counter, ref interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "flightLoop", reflect.TypeOf((*MockXplaneService)(nil).flightLoop), elapsedSinceLastCall, elapsedTimeSinceLastFlightLoop, counter, ref)
}

// onPluginStart mocks base method.
func (m *MockXplaneService) onPluginStart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onPluginStart")
}

// onPluginStart indicates an expected call of onPluginStart.
func (mr *MockXplaneServiceMockRecorder) onPluginStart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onPluginStart", reflect.TypeOf((*MockXplaneService)(nil).onPluginStart))
}

// onPluginStateChanged mocks base method.
func (m *MockXplaneService) onPluginStateChanged(state extra.PluginState, plugin *extra.XPlanePlugin) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onPluginStateChanged", state, plugin)
}

// onPluginStateChanged indicates an expected call of onPluginStateChanged.
func (mr *MockXplaneServiceMockRecorder) onPluginStateChanged(state, plugin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onPluginStateChanged", reflect.TypeOf((*MockXplaneService)(nil).onPluginStateChanged), state, plugin)
}

// onPluginStop mocks base method.
func (m *MockXplaneService) onPluginStop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "onPluginStop")
}

// onPluginStop indicates an expected call of onPluginStop.
func (mr *MockXplaneServiceMockRecorder) onPluginStop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "onPluginStop", reflect.TypeOf((*MockXplaneService)(nil).onPluginStop))
}
